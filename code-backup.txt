# Workshop Platform - Complete Code Backup
# Generated on 2025-09-22
# This file contains all source code from the workshop platform project

# =============================================================================
# File: ./workshop-management/package.json
# =============================================================================# =============================================================================
# File: ./workshop-management/src/types/index.ts
# =============================================================================

export interface User {
  $id: string;
  email: string;
  name: string;
  role: 'admin' | 'master' | 'student';
  profile: {
    avatar?: string;
    bio?: string;
    location?: string;
  };
  $createdAt: string;
}

export interface FormField {
  id: string;
  type: 'multiple-choice' | 'image-upload' | 'video-upload' | 'text-input' | 'textarea';
  label: string;
  required: boolean;
  options?: string[]; // For multiple choice
  placeholder?: string;
}

export interface Workshop {
  $id: string;
  masterId: string;
  title: string;
  description: string;
  category: string;
  location: string;
  price?: number;
  capacity?: number;
  startDate?: string;
  endDate?: string;
  applicationForm: FormField[];
  imageUrl?: string;
  formColor?: string;
  autoApprove?: boolean;
  status: 'draft' | 'published' | 'cancelled';
  $createdAt: string;
  master?: User;
  enrolledCount?: number;
}

export interface Application {
  $id: string;
  workshopId: string;
  studentId: string;
  responses: Record<string, any>;
  status: 'pending' | 'approved' | 'rejected';
  $createdAt: string;
  workshop?: Workshop;
  student?: User;
}

export interface Payment {
  $id: string;
  applicationId: string;
  amount: number;
  status: 'pending' | 'completed' | 'failed';
  stripePaymentId?: string;
  $createdAt: string;
}

# =============================================================================
# File: ./workshop-management/src/services/workshops.ts
# =============================================================================

import { databases, DATABASE_ID, COLLECTIONS } from '@/lib/appwrite';
import { ID, Query } from 'appwrite';
import { Workshop, FormField } from '@/types';

export class WorkshopService {
  async createWorkshop(data: Omit<Workshop, '$id' | '$createdAt'>) {
    try {
      const createData = {
        ...data,
        applicationForm: JSON.stringify(data.applicationForm)
      };

      // Remove undefined values to avoid Appwrite errors
      Object.keys(createData).forEach(key => {
        if (createData[key] === undefined) {
          delete createData[key];
        }
      });

      console.log('Creating workshop with data:', createData);

      const workshop = await databases.createDocument(
        DATABASE_ID,
        COLLECTIONS.WORKSHOPS,
        ID.unique(),
        createData
      );
      return workshop;
    } catch (error) {
      console.error('Create workshop error:', error);
      throw new Error('Failed to create workshop');
    }
  }

  async getWorkshops(limit = 25, offset = 0) {
    try {
      const workshops = await databases.listDocuments(
        DATABASE_ID,
        COLLECTIONS.WORKSHOPS,
        [
          Query.equal('status', 'published'),
          Query.limit(limit),
          Query.offset(offset),
          Query.orderDesc('$createdAt')
        ]
      );

      return {
        documents: workshops.documents.map(this.parseWorkshop),
        total: workshops.total
      };
    } catch (error) {
      throw new Error('Failed to fetch workshops');
    }
  }

  async getWorkshopsByMaster(masterId: string) {
    try {
      const workshops = await databases.listDocuments(
        DATABASE_ID,
        COLLECTIONS.WORKSHOPS,
        [
          Query.equal('masterId', masterId),
          Query.orderDesc('$createdAt')
        ]
      );

      return workshops.documents.map(this.parseWorkshop);
    } catch (error) {
      throw new Error('Failed to fetch master workshops');
    }
  }

  async getWorkshop(workshopId: string) {
    try {
      const workshop = await databases.getDocument(
        DATABASE_ID,
        COLLECTIONS.WORKSHOPS,
        workshopId
      );

      return this.parseWorkshop(workshop);
    } catch (error) {
      throw new Error('Failed to fetch workshop');
    }
  }

  async updateWorkshop(workshopId: string, data: Partial<Workshop>) {
    try {
      const updateData = { ...data };

      // Convert applicationForm to JSON string if present
      if (data.applicationForm) {
        updateData.applicationForm = JSON.stringify(data.applicationForm);
      }

      // Remove undefined values to avoid Appwrite errors
      Object.keys(updateData).forEach(key => {
        if (updateData[key] === undefined) {
          delete updateData[key];
        }
      });

      console.log('Sending update data to Appwrite:', updateData);

      const workshop = await databases.updateDocument(
        DATABASE_ID,
        COLLECTIONS.WORKSHOPS,
        workshopId,
        updateData
      );

      return this.parseWorkshop(workshop);
    } catch (error) {
      console.error('Update workshop error:', error);
      throw new Error('Failed to update workshop');
    }
  }

  async deleteWorkshop(workshopId: string) {
    try {
      await databases.deleteDocument(
        DATABASE_ID,
        COLLECTIONS.WORKSHOPS,
        workshopId
      );
    } catch (error) {
      throw new Error('Failed to delete workshop');
    }
  }

  async searchWorkshops(query: string, category?: string) {
    try {
      const queries = [
        Query.equal('status', 'published'),
        Query.search('title', query)
      ];

      if (category) {
        queries.push(Query.equal('category', category));
      }

      const workshops = await databases.listDocuments(
        DATABASE_ID,
        COLLECTIONS.WORKSHOPS,
        queries
      );

      return workshops.documents.map(this.parseWorkshop);
    } catch (error) {
      throw new Error('Failed to search workshops');
    }
  }

  private parseWorkshop(workshop: any): Workshop {
    return {
      ...workshop,
      applicationForm: JSON.parse(workshop.applicationForm || '[]')
    };
  }
}

# =============================================================================
# File: ./workshop-management/src/services/auth.ts
# =============================================================================

import { account, databases, DATABASE_ID, COLLECTIONS } from '@/lib/appwrite';
import { ID, Models } from 'appwrite';
import { User } from '@/types';

export class AuthService {
  async login(email: string, password: string) {
    try {
      const session = await account.createEmailPasswordSession(email, password);
      const user = await this.getCurrentUser();
      return { session, user };
    } catch (error) {
      throw new Error('Login failed');
    }
  }

  async register(email: string, password: string, name: string, role: 'master' | 'student' = 'student') {
    try {
      // First, logout any existing session
      try {
        await account.deleteSession('current');
      } catch (error) {
        // No active session, continue
      }

      // Create Appwrite account
      const account_user = await account.create(ID.unique(), email, password, name);

      // Create session immediately after account creation
      await account.createEmailPasswordSession(email, password);

      // Now create user document with active session
      const user = await databases.createDocument(
        DATABASE_ID,
        COLLECTIONS.USERS,
        ID.unique(),
        {
          email,
          name,
          role,
          profile: JSON.stringify({})
        }
      );

      return { account: account_user, user };
    } catch (error: any) {
      console.error('Registration error:', error);

      if (error.code === 409) {
        throw new Error('An account with this email already exists. Please try logging in instead.');
      }

      throw new Error(`Registration failed: ${error.message || 'Unknown error'}`);
    }
  }

  async getCurrentUser(): Promise<User | null> {
    try {
      const account_user = await account.get();

      const users = await databases.listDocuments(
        DATABASE_ID,
        COLLECTIONS.USERS,
        []
      );

      const user = users.documents.find(doc => doc.email === account_user.email);

      if (!user) return null;

      return {
        $id: user.$id,
        email: user.email,
        name: user.name,
        role: user.role,
        profile: user.profile || {},
        $createdAt: user.$createdAt
      };
    } catch (error) {
      return null;
    }
  }

  async logout() {
    try {
      await account.deleteSession('current');
    } catch (error) {
      throw new Error('Logout failed');
    }
  }

  async updateProfile(userId: string, data: Partial<User>) {
    try {
      const updatedUser = await databases.updateDocument(
        DATABASE_ID,
        COLLECTIONS.USERS,
        userId,
        data
      );
      return updatedUser;
    } catch (error) {
      throw new Error('Profile update failed');
    }
  }
}

# =============================================================================
# File: ./workshop-management/src/services/applications.ts
# =============================================================================

import { databases, DATABASE_ID, COLLECTIONS } from '@/lib/appwrite';
import { ID, Query } from 'appwrite';
import { Application } from '@/types';
import { WorkshopService } from './workshops';

export class ApplicationService {
  private workshopService = new WorkshopService();

  async createApplication(data: Omit<Application, '$id' | '$createdAt'>) {
    try {
      // Check if the workshop has auto-approve enabled
      const workshop = await this.workshopService.getWorkshop(data.workshopId);
      const initialStatus = workshop.autoApprove ? 'approved' : 'pending';

      const application = await databases.createDocument(
        DATABASE_ID,
        COLLECTIONS.APPLICATIONS,
        ID.unique(),
        {
          ...data,
          status: initialStatus,
          responses: JSON.stringify(data.responses)
        }
      );
      return application;
    } catch (error) {
      throw new Error('Failed to create application');
    }
  }

  async getApplicationsByStudent(studentId: string) {
    try {
      const applications = await databases.listDocuments(
        DATABASE_ID,
        COLLECTIONS.APPLICATIONS,
        [
          Query.equal('studentId', studentId),
          Query.orderDesc('$createdAt')
        ]
      );

      return applications.documents.map(this.parseApplication);
    } catch (error) {
      throw new Error('Failed to fetch student applications');
    }
  }

  async getApplicationsByWorkshop(workshopId: string) {
    try {
      const applications = await databases.listDocuments(
        DATABASE_ID,
        COLLECTIONS.APPLICATIONS,
        [
          Query.equal('workshopId', workshopId),
          Query.orderDesc('$createdAt')
        ]
      );

      return applications.documents.map(this.parseApplication);
    } catch (error) {
      throw new Error('Failed to fetch workshop applications');
    }
  }

  async updateApplication(applicationId: string, data: Partial<Application>) {
    try {
      const updateData = { ...data };
      if (data.responses) {
        updateData.responses = JSON.stringify(data.responses);
      }

      const application = await databases.updateDocument(
        DATABASE_ID,
        COLLECTIONS.APPLICATIONS,
        applicationId,
        updateData
      );

      return this.parseApplication(application);
    } catch (error) {
      throw new Error('Failed to update application');
    }
  }

  async approveApplication(applicationId: string) {
    return this.updateApplication(applicationId, { status: 'approved' });
  }

  async rejectApplication(applicationId: string) {
    return this.updateApplication(applicationId, { status: 'rejected' });
  }

  async deleteApplication(applicationId: string) {
    try {
      await databases.deleteDocument(
        DATABASE_ID,
        COLLECTIONS.APPLICATIONS,
        applicationId
      );
    } catch (error) {
      throw new Error('Failed to delete application');
    }
  }

  private parseApplication(application: any): Application {
    return {
      ...application,
      responses: JSON.parse(application.responses || '{}')
    };
  }
}

# =============================================================================
# File: ./workshop-management/src/lib/appwrite.ts
# =============================================================================

import { Account, Client, Databases, Storage, Functions } from 'appwrite';

const client = new Client();

client
  .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT!)
  .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID!);

export const account = new Account(client);
export const databases = new Databases(client);
export const storage = new Storage(client);
export const functions = new Functions(client);

export { client };

// Database and Collection IDs
export const DATABASE_ID = 'workshop-platform';
export const COLLECTIONS = {
  USERS: 'users',
  WORKSHOPS: 'workshops',
  APPLICATIONS: 'applications',
  PAYMENTS: 'payments',
} as const;

# =============================================================================
# File: ./workshop-management/src/lib/utils.ts
# =============================================================================

import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function formatDate(date: string | Date) {
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  }).format(new Date(date))
}

export function formatCurrency(amount: number) {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
  }).format(amount)
}

# =============================================================================
# File: ./workshop-management/src/components/layout/navbar.tsx
# =============================================================================

"use client";

import { useAuthStore } from '@/store/auth';
import { AuthService } from '@/services/auth';
import { Button } from '@/components/ui/button';
import { useRouter } from 'next/navigation';
import Link from 'next/link';

const authService = new AuthService();

export function Navbar() {
  const { user, setUser } = useAuthStore();
  const router = useRouter();

  const handleLogout = async () => {
    await authService.logout();
    setUser(null);
    router.push('/');
  };

  if (!user) return null;

  return (
    <nav className="bg-white shadow-sm border-b">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between h-16">
          <div className="flex items-center">
            <Link href="/" className="text-xl font-bold text-gray-900">
              Workshop Platform
            </Link>
          </div>

          <div className="flex items-center space-x-4">
            <span className="text-sm text-gray-600">
              Welcome, {user.name}
            </span>
            <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full">
              {user.role}
            </span>
            <Button variant="outline" size="sm" onClick={handleLogout}>
              Sign Out
            </Button>
          </div>
        </div>
      </div>
    </nav>
  );
}

# =============================================================================
# File: ./workshop-management/src/components/student/application-form.tsx
# =============================================================================

"use client";

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { useAuthStore } from '@/store/auth';
import { Workshop, FormField } from '@/types';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ApplicationService } from '@/services/applications';

interface ApplicationFormProps {
  workshop: Workshop;
  onSuccess: () => void;
}

export function ApplicationForm({ workshop, onSuccess }: ApplicationFormProps) {
  const { user } = useAuthStore();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitError, setSubmitError] = useState('');
  const applicationService = new ApplicationService();

  // Use workshop's form color or default to blue
  const formColor = workshop.formColor || '#3B82F6';

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    watch
  } = useForm();

  const onSubmit = async (data: any) => {
    if (!user) return;

    setIsSubmitting(true);
    setSubmitError('');

    try {
      // Create application using ApplicationService (includes auto-approve logic)
      await applicationService.createApplication({
        workshopId: workshop.$id,
        studentId: user.$id,
        responses: data,
        status: 'pending' // This will be overridden by auto-approve logic in service
      });

      onSuccess();
    } catch (error: any) {
      console.error('Failed to submit application:', error);
      setSubmitError('Failed to submit application. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const renderField = (field: FormField) => {
    const fieldName = field.id;
    const isRequired = field.required;

    switch (field.type) {
      case 'text-input':
        return (
          <div key={field.id} className="space-y-2">
            <label className="block text-sm font-medium text-gray-700">
              {field.label}
              {isRequired && <span className="text-red-500 ml-1">*</span>}
            </label>
            <Input
              {...register(fieldName, {
                required: isRequired ? `${field.label} is required` : false
              })}
              placeholder={field.placeholder || ''}
              className={errors[fieldName] ? 'border-red-500' : ''}
              onFocus={(e) => {
                e.target.style.borderColor = formColor;
                e.target.style.boxShadow = `0 0 0 2px ${formColor}40`;
              }}
              onBlur={(e) => {
                if (!errors[fieldName]) {
                  e.target.style.borderColor = '#D1D5DB';
                  e.target.style.boxShadow = 'none';
                }
              }}
            />
            {errors[fieldName] && (
              <p className="text-red-500 text-sm">{errors[fieldName]?.message as string}</p>
            )}
          </div>
        );

      case 'textarea':
        return (
          <div key={field.id} className="space-y-2">
            <label className="block text-sm font-medium text-gray-700">
              {field.label}
              {isRequired && <span className="text-red-500 ml-1">*</span>}
            </label>
            <textarea
              {...register(fieldName, {
                required: isRequired ? `${field.label} is required` : false
              })}
              placeholder={field.placeholder || ''}
              rows={4}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 ${
                errors[fieldName] ? 'border-red-500' : 'border-gray-300'
              }`}
              style={{
                '--tw-ring-color': formColor,
                '--tw-ring-opacity': '0.5'
              } as React.CSSProperties}
              onFocus={(e) => {
                e.target.style.borderColor = formColor;
                e.target.style.boxShadow = `0 0 0 2px ${formColor}40`;
              }}
              onBlur={(e) => {
                if (!errors[fieldName]) {
                  e.target.style.borderColor = '#D1D5DB';
                  e.target.style.boxShadow = 'none';
                }
              }}
            />
            {errors[fieldName] && (
              <p className="text-red-500 text-sm">{errors[fieldName]?.message as string}</p>
            )}
          </div>
        );

      case 'multiple-choice':
        return (
          <div key={field.id} className="space-y-2">
            <label className="block text-sm font-medium text-gray-700">
              {field.label}
              {isRequired && <span className="text-red-500 ml-1">*</span>}
            </label>
            <div className="space-y-2">
              {field.options?.map((option, index) => (
                <label key={index} className="flex items-center space-x-2">
                  <input
                    {...register(fieldName, {
                      required: isRequired ? `Please select an option for ${field.label}` : false
                    })}
                    type="radio"
                    value={option}
                    className="focus:ring-2"
                    style={{ accentColor: formColor }}
                  />
                  <span className="text-gray-700">{option}</span>
                </label>
              ))}
            </div>
            {errors[fieldName] && (
              <p className="text-red-500 text-sm">{errors[fieldName]?.message as string}</p>
            )}
          </div>
        );

      case 'image-upload':
        return (
          <div key={field.id} className="space-y-2">
            <label className="block text-sm font-medium text-gray-700">
              {field.label}
              {isRequired && <span className="text-red-500 ml-1">*</span>}
            </label>
            <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-gray-400 transition-colors">
              <input
                {...register(fieldName, {
                  required: isRequired ? `${field.label} is required` : false
                })}
                type="file"
                accept="image/*"
                className="hidden"
                id={`file-${field.id}`}
                onChange={(e) => {
                  const file = e.target.files?.[0];
                  if (file) {
                    setValue(fieldName, file.name);
                  }
                }}
              />
              <label
                htmlFor={`file-${field.id}`}
                className="cursor-pointer block"
              >
                <div className="text-gray-400 mb-2">
                  <svg className="mx-auto h-12 w-12" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                    <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                  </svg>
                </div>
                <p className="text-sm text-gray-600">
                  Click to upload image or drag and drop
                </p>
                <p className="text-xs text-gray-400 mt-1">
                  PNG, JPG, GIF up to 10MB
                </p>
              </label>
              {watch(fieldName) && (
                <p className="text-sm text-green-600 mt-2">
                  Selected: {watch(fieldName)}
                </p>
              )}
            </div>
            {errors[fieldName] && (
              <p className="text-red-500 text-sm">{errors[fieldName]?.message as string}</p>
            )}
          </div>
        );

      case 'video-upload':
        return (
          <div key={field.id} className="space-y-2">
            <label className="block text-sm font-medium text-gray-700">
              {field.label}
              {isRequired && <span className="text-red-500 ml-1">*</span>}
            </label>
            <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-gray-400 transition-colors">
              <input
                {...register(fieldName, {
                  required: isRequired ? `${field.label} is required` : false
                })}
                type="file"
                accept="video/*"
                className="hidden"
                id={`video-${field.id}`}
                onChange={(e) => {
                  const file = e.target.files?.[0];
                  if (file) {
                    setValue(fieldName, file.name);
                  }
                }}
              />
              <label
                htmlFor={`video-${field.id}`}
                className="cursor-pointer block"
              >
                <div className="text-gray-400 mb-2">
                  <svg className="mx-auto h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                  </svg>
                </div>
                <p className="text-sm text-gray-600">
                  Click to upload video or drag and drop
                </p>
                <p className="text-xs text-gray-400 mt-1">
                  MP4, MOV, AVI up to 100MB
                </p>
              </label>
              {watch(fieldName) && (
                <p className="text-sm text-green-600 mt-2">
                  Selected: {watch(fieldName)}
                </p>
              )}
            </div>
            {errors[fieldName] && (
              <p className="text-red-500 text-sm">{errors[fieldName]?.message as string}</p>
            )}
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
      <div className="rounded-lg p-4 mb-6" style={{
        backgroundColor: `${formColor}10`,
        borderWidth: '1px',
        borderStyle: 'solid',
        borderColor: `${formColor}40`
      }}>
        <h3 className="text-lg font-semibold mb-2" style={{ color: formColor }}>
          Application for: {workshop.title}
        </h3>
        <p className="text-sm" style={{ color: `${formColor}CC` }}>
          Please fill out the form below to apply for this workshop. All required fields must be completed.
        </p>
      </div>

      {workshop.applicationForm && workshop.applicationForm.length > 0 ? (
        <div className="space-y-6">
          {workshop.applicationForm.map(renderField)}
        </div>
      ) : (
        <div className="text-center py-8 text-gray-500">
          <p>No additional information required for this workshop.</p>
        </div>
      )}

      {submitError && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <p className="text-red-700">{submitError}</p>
        </div>
      )}

      <div className="flex justify-end space-x-3 pt-6 border-t border-gray-200">
        <Button
          type="button"
          variant="outline"
          onClick={onSuccess}
          disabled={isSubmitting}
        >
          Cancel
        </Button>
        <Button
          type="submit"
          disabled={isSubmitting}
          style={{
            backgroundColor: formColor,
            borderColor: formColor
          }}
          className="hover:opacity-90"
        >
          {isSubmitting ? 'Submitting...' : 'Submit Application'}
        </Button>
      </div>
    </form>
  );
}

# =============================================================================
# File: ./workshop-management/src/components/ui/input.tsx
# =============================================================================

import * as React from "react"
import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

# =============================================================================
# File: ./workshop-management/src/components/ui/button.tsx
# =============================================================================

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    return (
      <button
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

# =============================================================================
# File: ./workshop-management/src/components/providers/auth-provider.tsx
# =============================================================================

"use client";

import { useEffect } from 'react';
import { useAuthStore } from '@/store/auth';
import { AuthService } from '@/services/auth';

const authService = new AuthService();

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const { setUser, setLoading } = useAuthStore();

  useEffect(() => {
    const checkAuth = async () => {
      try {
        const user = await authService.getCurrentUser();
        setUser(user);
      } catch (error) {
        setUser(null);
      } finally {
        setLoading(false);
      }
    };

    checkAuth();
  }, [setUser, setLoading]);

  return <>{children}</>;
}

# =============================================================================
# File: ./workshop-management/src/components/auth/login-form.tsx
# =============================================================================

"use client";

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { AuthService } from '@/services/auth';
import { useAuthStore } from '@/store/auth';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';

const loginSchema = z.object({
  email: z.string().email('Invalid email address'),
  password: z.string().min(6, 'Password must be at least 6 characters'),
});

type LoginForm = z.infer<typeof loginSchema>;

export function LoginForm() {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const router = useRouter();
  const { setUser } = useAuthStore();
  const authService = new AuthService();

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<LoginForm>({
    resolver: zodResolver(loginSchema),
  });

  const onSubmit = async (data: LoginForm) => {
    setIsLoading(true);
    setError('');

    try {
      const { user } = await authService.login(data.email, data.password);
      setUser(user);

      switch (user.role) {
        case 'admin':
          router.push('/admin');
          break;
        case 'master':
          router.push('/master/dashboard');
          break;
        case 'student':
          router.push('/student/dashboard');
          break;
      }
    } catch (error) {
      setError('Invalid email or password');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4 w-full max-w-md">
      <div>
        <Input
          {...register('email')}
          type="email"
          placeholder="Email"
          className={errors.email ? 'border-red-500' : ''}
        />
        {errors.email && (
          <p className="text-red-500 text-sm mt-1">{errors.email.message}</p>
        )}
      </div>

      <div>
        <Input
          {...register('password')}
          type="password"
          placeholder="Password"
          className={errors.password ? 'border-red-500' : ''}
        />
        {errors.password && (
          <p className="text-red-500 text-sm mt-1">{errors.password.message}</p>
        )}
      </div>

      {error && (
        <p className="text-red-500 text-sm text-center">{error}</p>
      )}

      <Button type="submit" disabled={isLoading} className="w-full">
        {isLoading ? 'Signing in...' : 'Sign In'}
      </Button>
    </form>
  );
}

# =============================================================================
# File: ./workshop-management/src/components/auth/register-form.tsx
# =============================================================================

"use client";

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { AuthService } from '@/services/auth';
import { useAuthStore } from '@/store/auth';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';

const registerSchema = z.object({
  name: z.string().min(2, 'Name must be at least 2 characters'),
  email: z.string().email('Invalid email address'),
  password: z.string().min(6, 'Password must be at least 6 characters'),
  confirmPassword: z.string(),
  role: z.enum(['master', 'student']),
}).refine((data) => data.password === data.confirmPassword, {
  message: "Passwords don't match",
  path: ["confirmPassword"],
});

type RegisterForm = z.infer<typeof registerSchema>;

export function RegisterForm() {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const router = useRouter();
  const { setUser } = useAuthStore();
  const authService = new AuthService();

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<RegisterForm>({
    resolver: zodResolver(registerSchema),
  });

  const onSubmit = async (data: RegisterForm) => {
    setIsLoading(true);
    setError('');

    try {
      const { user } = await authService.register(
        data.email,
        data.password,
        data.name,
        data.role
      );
      setUser(user);

      switch (user.role) {
        case 'master':
          router.push('/master/dashboard');
          break;
        case 'student':
          router.push('/student/dashboard');
          break;
      }
    } catch (error) {
      setError('Registration failed. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4 w-full max-w-md">
      <div>
        <Input
          {...register('name')}
          type="text"
          placeholder="Full Name"
          className={errors.name ? 'border-red-500' : ''}
        />
        {errors.name && (
          <p className="text-red-500 text-sm mt-1">{errors.name.message}</p>
        )}
      </div>

      <div>
        <Input
          {...register('email')}
          type="email"
          placeholder="Email"
          className={errors.email ? 'border-red-500' : ''}
        />
        {errors.email && (
          <p className="text-red-500 text-sm mt-1">{errors.email.message}</p>
        )}
      </div>

      <div>
        <select
          {...register('role')}
          className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
        >
          <option value="student">Student</option>
          <option value="master">Workshop Master</option>
        </select>
        {errors.role && (
          <p className="text-red-500 text-sm mt-1">{errors.role.message}</p>
        )}
      </div>

      <div>
        <Input
          {...register('password')}
          type="password"
          placeholder="Password"
          className={errors.password ? 'border-red-500' : ''}
        />
        {errors.password && (
          <p className="text-red-500 text-sm mt-1">{errors.password.message}</p>
        )}
      </div>

      <div>
        <Input
          {...register('confirmPassword')}
          type="password"
          placeholder="Confirm Password"
          className={errors.confirmPassword ? 'border-red-500' : ''}
        />
        {errors.confirmPassword && (
          <p className="text-red-500 text-sm mt-1">{errors.confirmPassword.message}</p>
        )}
      </div>

      {error && (
        <p className="text-red-500 text-sm text-center">{error}</p>
      )}

      <Button type="submit" disabled={isLoading} className="w-full">
        {isLoading ? 'Creating account...' : 'Create Account'}
      </Button>
    </form>
  );
}

# =============================================================================
# File: ./workshop-management/src/app/page.tsx
# =============================================================================

"use client";

import { useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useAuthStore } from '@/store/auth';
import Link from 'next/link';
import { Button } from '@/components/ui/button';

export default function Home() {
  const { user, isLoading } = useAuthStore();
  const router = useRouter();

  useEffect(() => {
    if (!isLoading && user) {
      switch (user.role) {
        case 'admin':
          router.push('/admin');
          break;
        case 'master':
          router.push('/master/dashboard');
          break;
        case 'student':
          router.push('/student/dashboard');
          break;
      }
    }
  }, [user, isLoading, router]);

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-lg">Loading...</div>
      </div>
    );
  }

  if (user) {
    return null;
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      <div className="container mx-auto px-4 py-16">
        <div className="text-center">
          <h1 className="text-5xl font-bold text-gray-900 mb-6">
            Workshop Platform
          </h1>
          <p className="text-xl text-gray-600 mb-12 max-w-2xl mx-auto">
            Connect passionate masters with eager students. Share knowledge,
            learn new skills, and build a community of learners.
          </p>

          <div className="space-y-4 sm:space-y-0 sm:space-x-4 sm:flex sm:justify-center">
            <Link href="/auth/login">
              <Button size="lg" className="w-full sm:w-auto">
                Sign In
              </Button>
            </Link>
            <Link href="/auth/register">
              <Button variant="outline" size="lg" className="w-full sm:w-auto">
                Get Started
              </Button>
            </Link>
          </div>

          <div className="mt-16 grid md:grid-cols-3 gap-8">
            <div className="text-center">
              <div className="bg-white rounded-lg p-6 shadow-md">
                <h3 className="text-xl font-semibold mb-3">For Students</h3>
                <p className="text-gray-600">
                  Discover workshops, apply with custom forms, and learn from experts
                </p>
              </div>
            </div>

            <div className="text-center">
              <div className="bg-white rounded-lg p-6 shadow-md">
                <h3 className="text-xl font-semibold mb-3">For Masters</h3>
                <p className="text-gray-600">
                  Create workshops, build custom application forms, and manage students
                </p>
              </div>
            </div>

            <div className="text-center">
              <div className="bg-white rounded-lg p-6 shadow-md">
                <h3 className="text-xl font-semibold mb-3">Community Driven</h3>
                <p className="text-gray-600">
                  Join a platform that connects knowledge seekers with knowledge providers
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}


# =============================================================================
# File: ./workshop-management/src/app/student/dashboard/page.tsx
# =============================================================================

"use client";

import { useEffect, useState } from 'react';
import { useAuthStore } from '@/store/auth';
import { ApplicationService } from '@/services/applications';
import { Application } from '@/types';
import { Navbar } from '@/components/layout/navbar';
import { Button } from '@/components/ui/button';
import { formatDate } from '@/lib/utils';
import Link from 'next/link';
import { Clock, CheckCircle, XCircle, Eye } from 'lucide-react';

const applicationService = new ApplicationService();

export default function StudentDashboard() {
  const { user } = useAuthStore();
  const [applications, setApplications] = useState<Application[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const fetchApplications = async () => {
      if (!user) return;

      try {
        const userApplications = await applicationService.getApplicationsByStudent(user.$id);
        setApplications(userApplications);
      } catch (error) {
        console.error('Failed to fetch applications:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchApplications();
  }, [user]);

  if (!user || user.role !== 'student') {
    return <div>Access denied</div>;
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'pending':
        return <Clock className="h-5 w-5 text-yellow-500" />;
      case 'approved':
        return <CheckCircle className="h-5 w-5 text-green-500" />;
      case 'rejected':
        return <XCircle className="h-5 w-5 text-red-500" />;
      default:
        return <Clock className="h-5 w-5 text-gray-500" />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'pending':
        return 'bg-yellow-100 text-yellow-800';
      case 'approved':
        return 'bg-green-100 text-green-800';
      case 'rejected':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <Navbar />

      <div className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <div className="px-4 py-6 sm:px-0">
          <div className="flex justify-between items-center mb-6">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">
                My Applications
              </h1>
              <p className="mt-2 text-gray-600">
                Track your workshop applications and their status
              </p>
            </div>
            <Link href="/workshops">
              <Button>Browse Workshops</Button>
            </Link>
          </div>

          {/* Stats Cards */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="p-5">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <div className="w-8 h-8 bg-blue-500 rounded-md flex items-center justify-center">
                      <span className="text-white font-semibold">
                        {applications.length}
                      </span>
                    </div>
                  </div>
                  <div className="ml-5 w-0 flex-1">
                    <dl>
                      <dt className="text-sm font-medium text-gray-500 truncate">
                        Total Applications
                      </dt>
                      <dd className="text-lg font-medium text-gray-900">
                        {applications.length}
                      </dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="p-5">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <div className="w-8 h-8 bg-green-500 rounded-md flex items-center justify-center">
                      <span className="text-white font-semibold">
                        {applications.filter(a => a.status === 'approved').length}
                      </span>
                    </div>
                  </div>
                  <div className="ml-5 w-0 flex-1">
                    <dl>
                      <dt className="text-sm font-medium text-gray-500 truncate">
                        Approved
                      </dt>
                      <dd className="text-lg font-medium text-gray-900">
                        {applications.filter(a => a.status === 'approved').length}
                      </dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="p-5">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <div className="w-8 h-8 bg-yellow-500 rounded-md flex items-center justify-center">
                      <span className="text-white font-semibold">
                        {applications.filter(a => a.status === 'pending').length}
                      </span>
                    </div>
                  </div>
                  <div className="ml-5 w-0 flex-1">
                    <dl>
                      <dt className="text-sm font-medium text-gray-500 truncate">
                        Pending
                      </dt>
                      <dd className="text-lg font-medium text-gray-900">
                        {applications.filter(a => a.status === 'pending').length}
                      </dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Applications List */}
          <div className="bg-white shadow overflow-hidden sm:rounded-md">
            <div className="px-4 py-5 sm:px-6">
              <h3 className="text-lg leading-6 font-medium text-gray-900">
                Your Applications
              </h3>
              <p className="mt-1 max-w-2xl text-sm text-gray-500">
                All your workshop applications and their current status
              </p>
            </div>

            {isLoading ? (
              <div className="p-6 text-center">Loading applications...</div>
            ) : applications.length === 0 ? (
              <div className="p-6 text-center">
                <div className="text-gray-500 mb-4">
                  <Eye className="mx-auto h-12 w-12 text-gray-400" />
                </div>
                <h3 className="text-lg font-medium text-gray-900 mb-2">
                  No applications yet
                </h3>
                <p className="text-gray-500 mb-4">
                  You haven't applied to any workshops yet. Start exploring!
                </p>
                <Link href="/workshops">
                  <Button>Browse Workshops</Button>
                </Link>
              </div>
            ) : (
              <ul className="divide-y divide-gray-200">
                {applications.map((application) => (
                  <li key={application.$id}>
                    <div className="px-4 py-4 sm:px-6">
                      <div className="flex items-center justify-between">
                        <div className="flex-1">
                          <div className="flex items-center justify-between">
                            <h4 className="text-lg font-medium text-gray-900">
                              {application.workshop?.title || 'Workshop Title'}
                            </h4>
                            <div className="flex items-center space-x-2">
                              {getStatusIcon(application.status)}
                              <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(application.status)}`}>
                                {application.status}
                              </span>
                            </div>
                          </div>

                          <div className="mt-2 sm:flex sm:justify-between">
                            <div className="sm:flex">
                              <p className="flex items-center text-sm text-gray-500">
                                Applied on {formatDate(application.$createdAt)}
                              </p>
                            </div>
                          </div>

                          {application.status === 'approved' && (
                            <div className="mt-2 p-3 bg-green-50 border border-green-200 rounded-md">
                              <p className="text-sm text-green-800">
                                🎉 Congratulations! Your application has been approved.
                                You'll receive further instructions from the workshop master.
                              </p>
                            </div>
                          )}

                          {application.status === 'rejected' && (
                            <div className="mt-2 p-3 bg-red-50 border border-red-200 rounded-md">
                              <p className="text-sm text-red-800">
                                Unfortunately, your application was not approved this time.
                                Don't give up - keep applying to other workshops!
                              </p>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  </li>
                ))}
              </ul>
            )}
          </div>

          {/* Quick Actions */}
          {applications.length > 0 && (
            <div className="mt-8 bg-blue-50 rounded-lg p-6">
              <h3 className="text-lg font-semibold text-blue-900 mb-2">
                What's next?
              </h3>
              <div className="text-blue-700 space-y-2">
                <p>• Check back regularly for application status updates</p>
                <p>• Browse more workshops to expand your learning opportunities</p>
                <p>• Contact workshop masters directly if you have questions</p>
              </div>
              <div className="mt-4">
                <Link href="/workshops">
                  <Button variant="outline" className="border-blue-300 text-blue-700 hover:bg-blue-100">
                    Explore More Workshops
                  </Button>
                </Link>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

# =============================================================================
# File: ./workshop-management/src/app/workshops/page.tsx
# =============================================================================

"use client";

import { useEffect, useState } from 'react';
import { useAuthStore } from '@/store/auth';
import { WorkshopService } from '@/services/workshops';
import { Workshop } from '@/types';
import { Navbar } from '@/components/layout/navbar';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { formatDate, formatCurrency } from '@/lib/utils';
import Link from 'next/link';
import { Search, MapPin, Calendar, Users, DollarSign } from 'lucide-react';

const workshopService = new WorkshopService();

export default function WorkshopsPage() {
  const { user } = useAuthStore();
  const [workshops, setWorkshops] = useState<Workshop[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('');
  const [filteredWorkshops, setFilteredWorkshops] = useState<Workshop[]>([]);

  useEffect(() => {
    const fetchWorkshops = async () => {
      try {
        const { documents } = await workshopService.getWorkshops();
        setWorkshops(documents);
        setFilteredWorkshops(documents);
      } catch (error) {
        console.error('Failed to fetch workshops:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchWorkshops();
  }, []);

  useEffect(() => {
    let filtered = workshops;

    // Filter by search query
    if (searchQuery) {
      filtered = filtered.filter(
        workshop =>
          workshop.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
          workshop.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
          workshop.category.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    // Filter by category
    if (selectedCategory) {
      filtered = filtered.filter(workshop => workshop.category === selectedCategory);
    }

    setFilteredWorkshops(filtered);
  }, [workshops, searchQuery, selectedCategory]);

  const categories = Array.from(new Set(workshops.map(w => w.category)));

  return (
    <div className="min-h-screen bg-gray-50">
      <Navbar />

      <div className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <div className="px-4 py-6 sm:px-0">
          {/* Header */}
          <div className="text-center mb-12">
            <h1 className="text-4xl font-bold text-gray-900 mb-4">
              Discover Workshops
            </h1>
            <p className="text-xl text-gray-600 max-w-2xl mx-auto">
              Learn new skills from expert masters. Find the perfect workshop for your interests and goals.
            </p>
          </div>

          {/* Search and Filters */}
          <div className="bg-white p-6 rounded-lg shadow-md mb-8">
            <div className="flex flex-col md:flex-row gap-4">
              <div className="flex-1 relative">
                <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                <Input
                  placeholder="Search workshops by title, description, or category..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-10"
                />
              </div>
              <div className="md:w-64">
                <select
                  value={selectedCategory}
                  onChange={(e) => setSelectedCategory(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                >
                  <option value="">All Categories</option>
                  {categories.map(category => (
                    <option key={category} value={category}>
                      {category}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            <div className="mt-4 flex items-center text-sm text-gray-600">
              <span>Showing {filteredWorkshops.length} of {workshops.length} workshops</span>
            </div>
          </div>

          {/* Workshop Grid */}
          {isLoading ? (
            <div className="text-center py-12">
              <div className="text-lg">Loading workshops...</div>
            </div>
          ) : filteredWorkshops.length === 0 ? (
            <div className="text-center py-12">
              <div className="text-lg text-gray-500 mb-4">
                {workshops.length === 0 ? 'No workshops available yet' : 'No workshops match your search'}
              </div>
              {workshops.length === 0 && (
                <p className="text-gray-400">
                  Check back later for new workshops from our amazing masters!
                </p>
              )}
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {filteredWorkshops.map((workshop) => (
                <div key={workshop.$id} className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
                  {/* Workshop Image */}
                  {workshop.imageUrl && (
                    <div className="w-full h-48 overflow-hidden">
                      <img
                        src={workshop.imageUrl}
                        alt={workshop.title}
                        className="w-full h-full object-cover hover:scale-105 transition-transform duration-300"
                      />
                    </div>
                  )}
                  <div className="p-6">
                    <div className="flex justify-between items-start mb-3">
                      <span className="inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full font-semibold">
                        {workshop.category}
                      </span>
                      {workshop.price ? (
                        <span className="text-lg font-bold text-green-600">
                          {formatCurrency(workshop.price)}
                        </span>
                      ) : (
                        <span className="text-lg font-bold text-green-600">
                          Free
                        </span>
                      )}
                    </div>

                    <h3 className="text-xl font-semibold text-gray-900 mb-2 line-clamp-2">
                      {workshop.title}
                    </h3>

                    <p className="text-gray-600 text-sm mb-4 line-clamp-3">
                      {workshop.description}
                    </p>

                    <div className="space-y-2 mb-4">
                      <div className="flex items-center text-sm text-gray-500">
                        <MapPin className="h-4 w-4 mr-2" />
                        {workshop.location}
                      </div>

                      {workshop.startDate && (
                        <div className="flex items-center text-sm text-gray-500">
                          <Calendar className="h-4 w-4 mr-2" />
                          {formatDate(workshop.startDate)}
                        </div>
                      )}

                      {workshop.capacity && (
                        <div className="flex items-center text-sm text-gray-500">
                          <Users className="h-4 w-4 mr-2" />
                          Max {workshop.capacity} students
                        </div>
                      )}

                      <div className="flex items-center text-sm text-gray-500">
                        <span className="capitalize">
                          {workshop.scheduleType} schedule
                        </span>
                      </div>
                    </div>

                    <div className="flex space-x-3">
                      <Link href={`/workshops/${workshop.$id}`} className="flex-1">
                        <Button className="w-full">
                          View Details
                        </Button>
                      </Link>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}

          {/* Footer Call to Action */}
          {!user && workshops.length > 0 && (
            <div className="mt-12 text-center bg-blue-50 rounded-lg p-8">
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                Ready to start learning?
              </h3>
              <p className="text-gray-600 mb-4">
                Create an account to apply for workshops and track your applications.
              </p>
              <div className="space-x-4">
                <Link href="/auth/register">
                  <Button>Get Started</Button>
                </Link>
                <Link href="/auth/login">
                  <Button variant="outline">Sign In</Button>
                </Link>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

# =============================================================================
# File: ./workshop-management/src/app/workshops/[id]/page.tsx
# =============================================================================

"use client";

import { useEffect, useState } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { useAuthStore } from '@/store/auth';
import { WorkshopService } from '@/services/workshops';
import { Workshop } from '@/types';
import { Navbar } from '@/components/layout/navbar';
import { Button } from '@/components/ui/button';
import { formatDate, formatCurrency } from '@/lib/utils';
import { ApplicationForm } from '@/components/student/application-form';
import Link from 'next/link';
import {
  MapPin,
  Calendar,
  Users,
  Clock,
  ArrowLeft,
  CheckCircle
} from 'lucide-react';

const workshopService = new WorkshopService();

export default function WorkshopDetailPage() {
  const { user } = useAuthStore();
  const params = useParams();
  const router = useRouter();
  const [workshop, setWorkshop] = useState<Workshop | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [showApplicationForm, setShowApplicationForm] = useState(false);

  const workshopId = params.id as string;

  useEffect(() => {
    const fetchWorkshop = async () => {
      if (!workshopId) return;

      try {
        const workshopData = await workshopService.getWorkshop(workshopId);

        // Only show published workshops to students
        if (workshopData.status !== 'published') {
          router.push('/workshops');
          return;
        }

        setWorkshop(workshopData);
      } catch (error) {
        console.error('Failed to fetch workshop:', error);
        router.push('/workshops');
      } finally {
        setIsLoading(false);
      }
    };

    fetchWorkshop();
  }, [workshopId, router]);

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Navbar />
        <div className="max-w-4xl mx-auto py-6 sm:px-6 lg:px-8">
          <div className="px-4 py-6 sm:px-0">
            <div className="text-center">Loading workshop details...</div>
          </div>
        </div>
      </div>
    );
  }

  if (!workshop) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Navbar />
        <div className="max-w-4xl mx-auto py-6 sm:px-6 lg:px-8">
          <div className="px-4 py-6 sm:px-0">
            <div className="text-center">
              <h2 className="text-2xl font-bold text-gray-900">Workshop not found</h2>
              <p className="mt-2 text-gray-600">This workshop may not be available or published.</p>
              <Link href="/workshops">
                <Button className="mt-4">← Back to Workshops</Button>
              </Link>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Navbar />

      <div className="max-w-4xl mx-auto py-6 sm:px-6 lg:px-8">
        <div className="px-4 py-6 sm:px-0">
          {/* Back Navigation */}
          <div className="mb-6">
            <Link href="/workshops">
              <Button variant="outline" size="sm">
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Workshops
              </Button>
            </Link>
          </div>

          {/* Workshop Header */}
          <div className="bg-white shadow-lg rounded-lg overflow-hidden mb-8">
            {/* Workshop Image */}
            {workshop.imageUrl && (
              <div className="w-full h-64 md:h-80 overflow-hidden">
                <img
                  src={workshop.imageUrl}
                  alt={workshop.title}
                  className="w-full h-full object-cover"
                />
              </div>
            )}
            <div className="px-6 py-8">
              <div className="flex justify-between items-start mb-4">
                <span className="inline-block bg-blue-100 text-blue-800 text-sm px-3 py-1 rounded-full font-semibold">
                  {workshop.category}
                </span>
                <div className="text-right">
                  {workshop.price ? (
                    <div className="text-3xl font-bold text-green-600">
                      {formatCurrency(workshop.price)}
                    </div>
                  ) : (
                    <div className="text-3xl font-bold text-green-600">
                      Free
                    </div>
                  )}
                </div>
              </div>

              <h1 className="text-4xl font-bold text-gray-900 mb-4">
                {workshop.title}
              </h1>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                <div className="flex items-center text-gray-600">
                  <MapPin className="h-5 w-5 mr-3" />
                  <span>{workshop.location}</span>
                </div>

                {workshop.startDate && (
                  <div className="flex items-center text-gray-600">
                    <Calendar className="h-5 w-5 mr-3" />
                    <span>{formatDate(workshop.startDate)}</span>
                  </div>
                )}

                {workshop.capacity && (
                  <div className="flex items-center text-gray-600">
                    <Users className="h-5 w-5 mr-3" />
                    <span>Max {workshop.capacity} students</span>
                  </div>
                )}

                <div className="flex items-center text-gray-600">
                  <Clock className="h-5 w-5 mr-3" />
                  <span className="capitalize">{workshop.scheduleType} schedule</span>
                </div>
              </div>

              {/* Apply Button */}
              {user && user.role === 'student' && !showApplicationForm && (
                <Button
                  size="lg"
                  onClick={() => setShowApplicationForm(true)}
                  className="w-full md:w-auto"
                >
                  Apply for this Workshop
                </Button>
              )}

              {!user && (
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                  <p className="text-blue-800 mb-3">
                    You need to sign in to apply for this workshop.
                  </p>
                  <div className="space-x-3">
                    <Link href="/auth/login">
                      <Button size="sm">Sign In</Button>
                    </Link>
                    <Link href="/auth/register">
                      <Button variant="outline" size="sm">Create Account</Button>
                    </Link>
                  </div>
                </div>
              )}

              {user && user.role !== 'student' && (
                <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
                  <p className="text-gray-600">
                    Only students can apply for workshops.
                  </p>
                </div>
              )}
            </div>
          </div>

          {/* Workshop Description */}
          <div className="bg-white shadow-lg rounded-lg overflow-hidden mb-8">
            <div className="px-6 py-6">
              <h2 className="text-2xl font-bold text-gray-900 mb-4">
                About This Workshop
              </h2>
              <div className="prose max-w-none text-gray-700">
                <p className="text-lg leading-relaxed">
                  {workshop.description}
                </p>
              </div>
            </div>
          </div>

          {/* Application Form */}
          {showApplicationForm && user && user.role === 'student' && (
            <div className="bg-white shadow-lg rounded-lg overflow-hidden">
              <div className="px-6 py-6">
                <div className="flex justify-between items-center mb-6">
                  <h2 className="text-2xl font-bold text-gray-900">
                    Application Form
                  </h2>
                  <Button
                    variant="outline"
                    onClick={() => setShowApplicationForm(false)}
                  >
                    Cancel
                  </Button>
                </div>

                <ApplicationForm
                  workshop={workshop}
                  onSuccess={() => {
                    setShowApplicationForm(false);
                    // Could show success message or redirect
                  }}
                />
              </div>
            </div>
          )}

          {/* Workshop Requirements/Info */}
          {workshop.applicationForm && workshop.applicationForm.length > 0 && !showApplicationForm && (
            <div className="bg-white shadow-lg rounded-lg overflow-hidden">
              <div className="px-6 py-6">
                <h2 className="text-2xl font-bold text-gray-900 mb-4">
                  Application Requirements
                </h2>
                <p className="text-gray-600 mb-4">
                  You'll need to provide the following information when applying:
                </p>
                <div className="space-y-3">
                  {workshop.applicationForm.map((field, index) => (
                    <div key={field.id} className="flex items-center">
                      <CheckCircle className="h-5 w-5 text-green-500 mr-3" />
                      <span className="text-gray-700">
                        {field.label}
                        {field.required && <span className="text-red-500 ml-1">*</span>}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

# =============================================================================
# File: ./workshop-management/src/app/globals.css
# =============================================================================

@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}


# =============================================================================
# File: ./workshop-management/src/app/layout.tsx
# =============================================================================

import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { AuthProvider } from "@/components/providers/auth-provider";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Workshop Platform",
  description: "Connect masters and students through workshops",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={`${inter.className} antialiased`}>
        <AuthProvider>
          {children}
        </AuthProvider>
      </body>
    </html>
  );
}


# =============================================================================
# File: ./workshop-management/src/app/auth/login/page.tsx
# =============================================================================

"use client";

import Link from 'next/link';
import { LoginForm } from '@/components/auth/login-form';

export default function LoginPage() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="max-w-md w-full space-y-8 p-8">
        <div className="text-center">
          <h2 className="text-3xl font-bold text-gray-900">
            Sign in to your account
          </h2>
          <p className="mt-2 text-sm text-gray-600">
            Or{' '}
            <Link
              href="/auth/register"
              className="font-medium text-indigo-600 hover:text-indigo-500"
            >
              create a new account
            </Link>
          </p>
        </div>

        <div className="flex justify-center">
          <LoginForm />
        </div>
      </div>
    </div>
  );
}

# =============================================================================
# File: ./workshop-management/src/app/auth/register/page.tsx
# =============================================================================

"use client";

import Link from 'next/link';
import { RegisterForm } from '@/components/auth/register-form';

export default function RegisterPage() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="max-w-md w-full space-y-8 p-8">
        <div className="text-center">
          <h2 className="text-3xl font-bold text-gray-900">
            Create your account
          </h2>
          <p className="mt-2 text-sm text-gray-600">
            Already have an account?{' '}
            <Link
              href="/auth/login"
              className="font-medium text-indigo-600 hover:text-indigo-500"
            >
              Sign in
            </Link>
          </p>
        </div>

        <div className="flex justify-center">
          <RegisterForm />
        </div>
      </div>
    </div>
  );
}

# =============================================================================
# File: ./workshop-management/src/app/master/dashboard/page.tsx
# =============================================================================

"use client";

import { useEffect, useState } from 'react';
import { useAuthStore } from '@/store/auth';
import { WorkshopService } from '@/services/workshops';
import { Workshop } from '@/types';
import { Navbar } from '@/components/layout/navbar';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import { formatDate, formatCurrency } from '@/lib/utils';

const workshopService = new WorkshopService();

export default function MasterDashboard() {
  const { user } = useAuthStore();
  const [workshops, setWorkshops] = useState<Workshop[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const fetchWorkshops = async () => {
      if (!user) return;

      try {
        const userWorkshops = await workshopService.getWorkshopsByMaster(user.$id);
        setWorkshops(userWorkshops);
      } catch (error) {
        console.error('Failed to fetch workshops:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchWorkshops();
  }, [user]);

  if (!user || user.role !== 'master') {
    return <div>Access denied</div>;
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Navbar />

      <div className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <div className="px-4 py-6 sm:px-0">
          <div className="flex justify-between items-center mb-6">
            <h1 className="text-3xl font-bold text-gray-900">
              Master Dashboard
            </h1>
            <Link href="/master/workshops/create">
              <Button>Create Workshop</Button>
            </Link>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="p-5">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <div className="w-8 h-8 bg-blue-500 rounded-md flex items-center justify-center">
                      <span className="text-white font-semibold">
                        {workshops.length}
                      </span>
                    </div>
                  </div>
                  <div className="ml-5 w-0 flex-1">
                    <dl>
                      <dt className="text-sm font-medium text-gray-500 truncate">
                        Total Workshops
                      </dt>
                      <dd className="text-lg font-medium text-gray-900">
                        {workshops.length}
                      </dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="p-5">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <div className="w-8 h-8 bg-green-500 rounded-md flex items-center justify-center">
                      <span className="text-white font-semibold">
                        {workshops.filter(w => w.status === 'published').length}
                      </span>
                    </div>
                  </div>
                  <div className="ml-5 w-0 flex-1">
                    <dl>
                      <dt className="text-sm font-medium text-gray-500 truncate">
                        Published
                      </dt>
                      <dd className="text-lg font-medium text-gray-900">
                        {workshops.filter(w => w.status === 'published').length}
                      </dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="p-5">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <div className="w-8 h-8 bg-yellow-500 rounded-md flex items-center justify-center">
                      <span className="text-white font-semibold">
                        {workshops.filter(w => w.status === 'draft').length}
                      </span>
                    </div>
                  </div>
                  <div className="ml-5 w-0 flex-1">
                    <dl>
                      <dt className="text-sm font-medium text-gray-500 truncate">
                        Drafts
                      </dt>
                      <dd className="text-lg font-medium text-gray-900">
                        {workshops.filter(w => w.status === 'draft').length}
                      </dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div className="bg-white shadow overflow-hidden sm:rounded-md">
            <div className="px-4 py-5 sm:px-6">
              <h3 className="text-lg leading-6 font-medium text-gray-900">
                Your Workshops
              </h3>
              <p className="mt-1 max-w-2xl text-sm text-gray-500">
                Manage your workshops and view applications
              </p>
            </div>

            {isLoading ? (
              <div className="p-6 text-center">Loading workshops...</div>
            ) : workshops.length === 0 ? (
              <div className="p-6 text-center">
                <p className="text-gray-500">No workshops yet</p>
                <Link href="/master/workshops/create">
                  <Button className="mt-4">Create Your First Workshop</Button>
                </Link>
              </div>
            ) : (
              <ul className="divide-y divide-gray-200">
                {workshops.map((workshop) => (
                  <li key={workshop.$id}>
                    <div className="px-4 py-4 sm:px-6">
                      <div className="flex items-center justify-between">
                        <div className="flex-1">
                          <h4 className="text-lg font-medium text-gray-900">
                            {workshop.title}
                          </h4>
                          <p className="text-sm text-gray-500 mt-1">
                            {workshop.description.substring(0, 150)}...
                          </p>
                          <div className="mt-2 flex items-center space-x-4 text-sm text-gray-500">
                            <span>Category: {workshop.category}</span>
                            <span>Location: {workshop.location}</span>
                            {workshop.price && (
                              <span>Price: {formatCurrency(workshop.price)}</span>
                            )}
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                            workshop.status === 'published'
                              ? 'bg-green-100 text-green-800'
                              : workshop.status === 'draft'
                              ? 'bg-yellow-100 text-yellow-800'
                              : 'bg-red-100 text-red-800'
                          }`}>
                            {workshop.status}
                          </span>
                          <Link href={`/master/workshops/${workshop.$id}`}>
                            <Button variant="outline" size="sm">
                              Manage
                            </Button>
                          </Link>
                        </div>
                      </div>
                    </div>
                  </li>
                ))}
              </ul>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

# =============================================================================
# File: ./workshop-management/src/app/master/workshops/[id]/page.tsx
# =============================================================================

"use client";

import { useEffect, useState } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { useAuthStore } from '@/store/auth';
import { WorkshopService } from '@/services/workshops';
import { ApplicationService } from '@/services/applications';
import { Workshop, Application } from '@/types';
import { Navbar } from '@/components/layout/navbar';
import { Button } from '@/components/ui/button';
import { formatDate, formatCurrency } from '@/lib/utils';
import Link from 'next/link';

const workshopService = new WorkshopService();
const applicationService = new ApplicationService();

export default function ManageWorkshop() {
  const { user } = useAuthStore();
  const params = useParams();
  const router = useRouter();
  const [workshop, setWorkshop] = useState<Workshop | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [applications, setApplications] = useState<Application[]>([]);
  const [applicationsLoading, setApplicationsLoading] = useState(true);

  const workshopId = params.id as string;

  useEffect(() => {
    const fetchWorkshop = async () => {
      if (!user || !workshopId) return;

      try {
        const workshopData = await workshopService.getWorkshop(workshopId);

        // Check if user owns this workshop
        if (workshopData.masterId !== user.$id) {
          router.push('/master/dashboard');
          return;
        }

        setWorkshop(workshopData);

        // Fetch applications for this workshop
        try {
          const workshopApplications = await applicationService.getApplicationsByWorkshop(workshopId);
          setApplications(workshopApplications);
        } catch (error) {
          console.error('Failed to fetch applications:', error);
        } finally {
          setApplicationsLoading(false);
        }
      } catch (error) {
        console.error('Failed to fetch workshop:', error);
        router.push('/master/dashboard');
      } finally {
        setIsLoading(false);
      }
    };

    fetchWorkshop();
  }, [user, workshopId, router]);

  const handlePublish = async () => {
    if (!workshop) return;

    try {
      const updatedWorkshop = await workshopService.updateWorkshop(workshop.$id, {
        status: 'published'
      });
      setWorkshop(updatedWorkshop);
    } catch (error) {
      console.error('Failed to publish workshop:', error);
    }
  };

  const handleUnpublish = async () => {
    if (!workshop) return;

    try {
      const updatedWorkshop = await workshopService.updateWorkshop(workshop.$id, {
        status: 'draft'
      });
      setWorkshop(updatedWorkshop);
    } catch (error) {
      console.error('Failed to unpublish workshop:', error);
    }
  };

  const handleDelete = async () => {
    if (!workshop || !confirm('Are you sure you want to delete this workshop?')) return;

    try {
      await workshopService.deleteWorkshop(workshop.$id);
      router.push('/master/dashboard');
    } catch (error) {
      console.error('Failed to delete workshop:', error);
    }
  };

  const handleApproveApplication = async (applicationId: string) => {
    try {
      await applicationService.approveApplication(applicationId);
      // Refresh applications list
      const updatedApplications = await applicationService.getApplicationsByWorkshop(workshopId);
      setApplications(updatedApplications);
    } catch (error) {
      console.error('Failed to approve application:', error);
    }
  };

  const handleRejectApplication = async (applicationId: string) => {
    try {
      await applicationService.rejectApplication(applicationId);
      // Refresh applications list
      const updatedApplications = await applicationService.getApplicationsByWorkshop(workshopId);
      setApplications(updatedApplications);
    } catch (error) {
      console.error('Failed to reject application:', error);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'pending':
        return 'bg-yellow-100 text-yellow-800';
      case 'approved':
        return 'bg-green-100 text-green-800';
      case 'rejected':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  if (!user || user.role !== 'master') {
    return <div>Access denied</div>;
  }

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Navbar />
        <div className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
          <div className="px-4 py-6 sm:px-0">
            <div className="text-center">Loading workshop...</div>
          </div>
        </div>
      </div>
    );
  }

  if (!workshop) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Navbar />
        <div className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
          <div className="px-4 py-6 sm:px-0">
            <div className="text-center">Workshop not found</div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Navbar />

      <div className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <div className="px-4 py-6 sm:px-0">
          <div className="flex justify-between items-center mb-6">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">
                Manage Workshop
              </h1>
              <p className="mt-2 text-gray-600">
                Manage your workshop settings and view applications
              </p>
            </div>
            <Link href="/master/dashboard">
              <Button variant="outline">← Back to Dashboard</Button>
            </Link>
          </div>

          <div className="bg-white shadow overflow-hidden sm:rounded-lg mb-8">
            <div className="px-4 py-5 sm:px-6">
              <div className="flex justify-between items-start">
                <div>
                  <h3 className="text-lg leading-6 font-medium text-gray-900">
                    {workshop.title}
                  </h3>
                  <p className="mt-1 max-w-2xl text-sm text-gray-500">
                    Workshop details and settings
                  </p>
                </div>
                <div className="flex space-x-3">
                  {workshop.status === 'draft' ? (
                    <Button onClick={handlePublish}>
                      Publish Workshop
                    </Button>
                  ) : (
                    <Button variant="outline" onClick={handleUnpublish}>
                      Unpublish
                    </Button>
                  )}
                  <Link href={`/master/workshops/${workshop.$id}/edit`}>
                    <Button variant="outline">
                      Edit Workshop
                    </Button>
                  </Link>
                  <Button variant="destructive" onClick={handleDelete}>
                    Delete
                  </Button>
                </div>
              </div>
            </div>

            <div className="border-t border-gray-200 px-4 py-5 sm:px-6">
              <dl className="grid grid-cols-1 gap-x-4 gap-y-6 sm:grid-cols-2">
                <div>
                  <dt className="text-sm font-medium text-gray-500">Status</dt>
                  <dd className="mt-1 text-sm text-gray-900">
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                      workshop.status === 'published'
                        ? 'bg-green-100 text-green-800'
                        : workshop.status === 'draft'
                        ? 'bg-yellow-100 text-yellow-800'
                        : 'bg-red-100 text-red-800'
                    }`}>
                      {workshop.status}
                    </span>
                  </dd>
                </div>

                <div>
                  <dt className="text-sm font-medium text-gray-500">Category</dt>
                  <dd className="mt-1 text-sm text-gray-900">{workshop.category}</dd>
                </div>

                <div>
                  <dt className="text-sm font-medium text-gray-500">Location</dt>
                  <dd className="mt-1 text-sm text-gray-900">{workshop.location}</dd>
                </div>

                <div>
                  <dt className="text-sm font-medium text-gray-500">Price</dt>
                  <dd className="mt-1 text-sm text-gray-900">
                    {workshop.price ? formatCurrency(workshop.price) : 'Free'}
                  </dd>
                </div>

                <div>
                  <dt className="text-sm font-medium text-gray-500">Capacity</dt>
                  <dd className="mt-1 text-sm text-gray-900">
                    {workshop.capacity || 'Unlimited'}
                  </dd>
                </div>

                <div>
                  <dt className="text-sm font-medium text-gray-500">Schedule Type</dt>
                  <dd className="mt-1 text-sm text-gray-900 capitalize">
                    {workshop.scheduleType}
                  </dd>
                </div>

                {workshop.startDate && (
                  <div>
                    <dt className="text-sm font-medium text-gray-500">Start Date</dt>
                    <dd className="mt-1 text-sm text-gray-900">
                      {formatDate(workshop.startDate)}
                    </dd>
                  </div>
                )}

                {workshop.endDate && (
                  <div>
                    <dt className="text-sm font-medium text-gray-500">End Date</dt>
                    <dd className="mt-1 text-sm text-gray-900">
                      {formatDate(workshop.endDate)}
                    </dd>
                  </div>
                )}

                <div className="sm:col-span-2">
                  <dt className="text-sm font-medium text-gray-500">Description</dt>
                  <dd className="mt-1 text-sm text-gray-900">{workshop.description}</dd>
                </div>
              </dl>
            </div>
          </div>

          {/* Application Form Preview */}
          <div className="bg-white shadow overflow-hidden sm:rounded-lg mb-8">
            <div className="px-4 py-5 sm:px-6">
              <h3 className="text-lg leading-6 font-medium text-gray-900">
                Application Form
              </h3>
              <p className="mt-1 max-w-2xl text-sm text-gray-500">
                Preview of the form students will fill out
              </p>
            </div>

            <div className="border-t border-gray-200 px-4 py-5 sm:px-6">
              {workshop.applicationForm && workshop.applicationForm.length > 0 ? (
                <div className="space-y-4">
                  {workshop.applicationForm.map((field, index) => (
                    <div key={field.id} className="border-l-4 border-blue-200 pl-4">
                      <label className="block text-sm font-medium text-gray-700">
                        {field.label}
                        {field.required && <span className="text-red-500 ml-1">*</span>}
                      </label>
                      <p className="text-xs text-gray-500 mt-1 capitalize">
                        {field.type.replace('-', ' ')} field
                      </p>
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-gray-500">No application form configured</p>
              )}
            </div>
          </div>

          {/* Applications Section */}
          <div className="bg-white shadow overflow-hidden sm:rounded-lg">
            <div className="px-4 py-5 sm:px-6">
              <h3 className="text-lg leading-6 font-medium text-gray-900">
                Applications ({applications.length})
              </h3>
              <p className="mt-1 max-w-2xl text-sm text-gray-500">
                Student applications for this workshop
              </p>
            </div>

            <div className="border-t border-gray-200">
              {applicationsLoading ? (
                <div className="px-4 py-5 sm:px-6 text-center text-gray-500">
                  Loading applications...
                </div>
              ) : applications.length === 0 ? (
                <div className="px-4 py-5 sm:px-6 text-center text-gray-500">
                  No applications yet. Applications will appear here once students start applying.
                </div>
              ) : (
                <ul className="divide-y divide-gray-200">
                  {applications.map((application) => (
                    <li key={application.$id} className="px-4 py-5 sm:px-6">
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <div className="flex items-center justify-between mb-2">
                            <h4 className="text-lg font-medium text-gray-900">
                              {application.student?.name || 'Student Name'}
                            </h4>
                            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(application.status)}`}>
                              {application.status}
                            </span>
                          </div>

                          <p className="text-sm text-gray-600 mb-3">
                            {application.student?.email || 'No email available'}
                          </p>

                          <p className="text-sm text-gray-500 mb-4">
                            Applied on {formatDate(application.$createdAt)}
                          </p>

                          {/* Application Responses */}
                          {application.responses && Object.keys(application.responses).length > 0 && (
                            <div className="mt-4 border-t border-gray-100 pt-4">
                              <h5 className="text-sm font-medium text-gray-900 mb-2">Application Responses:</h5>
                              <div className="space-y-2">
                                {Object.entries(application.responses).map(([fieldId, response]) => {
                                  const field = workshop?.applicationForm?.find(f => f.id === fieldId);
                                  return (
                                    <div key={fieldId} className="text-sm">
                                      <span className="font-medium text-gray-700">
                                        {field?.label || fieldId}:
                                      </span>
                                      <span className="ml-2 text-gray-600">
                                        {typeof response === 'string' ? response : JSON.stringify(response)}
                                      </span>
                                    </div>
                                  );
                                })}
                              </div>
                            </div>
                          )}

                          {/* Action Buttons */}
                          {application.status === 'pending' && (
                            <div className="mt-4 flex space-x-3">
                              <Button
                                size="sm"
                                onClick={() => handleApproveApplication(application.$id)}
                                className="bg-green-600 hover:bg-green-700"
                              >
                                Approve
                              </Button>
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => handleRejectApplication(application.$id)}
                                className="border-red-300 text-red-700 hover:bg-red-50"
                              >
                                Reject
                              </Button>
                            </div>
                          )}

                          {application.status === 'approved' && (
                            <div className="mt-4 p-3 bg-green-50 border border-green-200 rounded-md">
                              <p className="text-sm text-green-800">
                                ✅ Application approved. You can contact the student at {application.student?.email}
                              </p>
                            </div>
                          )}

                          {application.status === 'rejected' && (
                            <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded-md">
                              <p className="text-sm text-red-800">
                                ❌ Application rejected.
                              </p>
                            </div>
                          )}
                        </div>
                      </div>
                    </li>
                  ))}
                </ul>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

# =============================================================================
# File: ./workshop-management/src/app/master/workshops/[id]/edit/page.tsx
# =============================================================================

"use client";

import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useAuthStore } from '@/store/auth';
import { WorkshopService } from '@/services/workshops';
import { FormField, Workshop } from '@/types';
import { Navbar } from '@/components/layout/navbar';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { FormBuilder } from '@/components/form-builder/form-builder';
import { FormPreview } from '@/components/form-builder/form-preview';
import { storage } from '@/lib/appwrite';
import { ID } from 'appwrite';

const workshopSchema = z.object({
  title: z.string().min(1, 'Title is required'),
  description: z.string().min(10, 'Description must be at least 10 characters'),
  category: z.string().min(1, 'Category is required'),
  location: z.string().min(1, 'Location is required'),
  price: z.string().optional(),
  capacity: z.string().optional(),
  startDate: z.string().optional(),
  endDate: z.string().optional(),
  formColor: z.string().optional(),
  autoApprove: z.boolean().optional(),
});

type WorkshopForm = z.infer<typeof workshopSchema>;

const workshopService = new WorkshopService();

export default function EditWorkshop() {
  const { user } = useAuthStore();
  const params = useParams();
  const router = useRouter();
  const [workshop, setWorkshop] = useState<Workshop | null>(null);
  const [formFields, setFormFields] = useState<FormField[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [showPreview, setShowPreview] = useState(false);
  const [workshopImage, setWorkshopImage] = useState<File | null>(null);
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const [uploadingImage, setUploadingImage] = useState(false);

  const workshopId = params.id as string;

  const {
    register,
    handleSubmit,
    watch,
    setValue,
    formState: { errors },
  } = useForm<WorkshopForm>({
    resolver: zodResolver(workshopSchema),
  });


  useEffect(() => {
    const fetchWorkshop = async () => {
      if (!user || !workshopId) return;

      try {
        const workshopData = await workshopService.getWorkshop(workshopId);

        // Check if user owns this workshop
        if (workshopData.masterId !== user.$id) {
          router.push('/master/dashboard');
          return;
        }

        console.log('Workshop data received:', workshopData);
        console.log('Start date from DB:', workshopData.startDate);
        console.log('End date from DB:', workshopData.endDate);

        setWorkshop(workshopData);
        setFormFields(workshopData.applicationForm || []);
        setImagePreview(workshopData.imageUrl || null);

        // Helper function to convert ISO date to datetime-local format
        const formatDateForInput = (dateString: string | undefined): string => {
          if (!dateString) {
            console.log('No date string provided');
            return '';
          }
          try {
            console.log('Formatting date:', dateString);
            const date = new Date(dateString);
            console.log('Parsed date:', date);

            // Check if date is valid
            if (isNaN(date.getTime())) {
              console.log('Invalid date');
              return '';
            }

            // Format as YYYY-MM-DDTHH:MM for datetime-local input
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');
            const formatted = `${year}-${month}-${day}T${hours}:${minutes}`;
            console.log('Formatted date:', formatted);
            return formatted;
          } catch (error) {
            console.error('Date formatting error:', error);
            return '';
          }
        };

        // Set form values
        setValue('title', workshopData.title);
        setValue('description', workshopData.description);
        setValue('category', workshopData.category);
        setValue('location', workshopData.location);
        setValue('price', workshopData.price?.toString() || '');
        setValue('capacity', workshopData.capacity?.toString() || '');
        setValue('startDate', formatDateForInput(workshopData.startDate));
        setValue('endDate', formatDateForInput(workshopData.endDate));
        setValue('formColor', workshopData.formColor || '#3B82F6');
        setValue('autoApprove', workshopData.autoApprove || false);
      } catch (error) {
        console.error('Failed to fetch workshop:', error);
        router.push('/master/dashboard');
      } finally {
        setIsLoading(false);
      }
    };

    fetchWorkshop();
  }, [user, workshopId, router, setValue]);

  if (!user || user.role !== 'master') {
    return <div>Access denied</div>;
  }

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Navbar />
        <div className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
          <div className="px-4 py-6 sm:px-0">
            <div className="text-center">Loading workshop...</div>
          </div>
        </div>
      </div>
    );
  }

  if (!workshop) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Navbar />
        <div className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
          <div className="px-4 py-6 sm:px-0">
            <div className="text-center">Workshop not found</div>
          </div>
        </div>
      </div>
    );
  }

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setWorkshopImage(file);
      const reader = new FileReader();
      reader.onload = (e) => {
        setImagePreview(e.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const uploadImage = async (): Promise<string | undefined> => {
    if (!workshopImage) return workshop.imageUrl;

    console.log('Starting image upload for edit...', workshopImage.name, workshopImage.type);
    setUploadingImage(true);
    try {
      const response = await storage.createFile(
        'workshop-images',
        ID.unique(),
        workshopImage,
        ['read("any")'] // Allow anyone to read the image
      );

      const imageUrl = `${process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT}/storage/buckets/workshop-images/files/${response.$id}/view?project=${process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID}`;
      console.log('Image uploaded successfully for edit:', imageUrl);

      return imageUrl;
    } catch (error) {
      console.error('Failed to upload image in edit:', error);
      return workshop.imageUrl;
    } finally {
      setUploadingImage(false);
    }
  };

  const onSubmit = async (data: WorkshopForm) => {
    setIsSaving(true);

    try {
      // Upload image if provided
      const imageUrl = await uploadImage();

      const workshopData = {
        title: data.title,
        description: data.description,
        category: data.category,
        location: data.location,
        price: data.price ? parseInt(data.price) : undefined,
        capacity: data.capacity ? parseInt(data.capacity) : undefined,
        startDate: data.startDate || undefined,
        endDate: data.endDate || undefined,
        applicationForm: formFields,
        imageUrl,
        formColor: data.formColor || '#3B82F6',
        autoApprove: data.autoApprove || false,
      };

      console.log('Updating workshop with data:', workshopData);
      console.log('Image URL in update:', imageUrl);
      await workshopService.updateWorkshop(workshop.$id, workshopData);
      router.push(`/master/workshops/${workshop.$id}`);
    } catch (error) {
      console.error('Failed to update workshop:', error);
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <Navbar />

      <div className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <div className="px-4 py-6 sm:px-0">
          <div className="mb-6">
            <h1 className="text-3xl font-bold text-gray-900">
              Edit Workshop
            </h1>
            <p className="mt-2 text-gray-600">
              Update your workshop details and application form
            </p>
          </div>

          <form onSubmit={handleSubmit(onSubmit)} className="space-y-8">
            <div className="bg-white shadow rounded-lg p-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-6">
                Workshop Details
              </h2>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Workshop Title *
                  </label>
                  <Input
                    {...register('title')}
                    placeholder="Enter workshop title"
                    className={errors.title ? 'border-red-500' : ''}
                  />
                  {errors.title && (
                    <p className="text-red-500 text-sm mt-1">{errors.title.message}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Category *
                  </label>
                  <Input
                    {...register('category')}
                    placeholder="e.g., Technology, Art, Business"
                    className={errors.category ? 'border-red-500' : ''}
                  />
                  {errors.category && (
                    <p className="text-red-500 text-sm mt-1">{errors.category.message}</p>
                  )}
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Description *
                  </label>
                  <textarea
                    {...register('description')}
                    rows={4}
                    placeholder="Describe your workshop..."
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 ${
                      errors.description ? 'border-red-500' : 'border-gray-300'
                    }`}
                  />
                  {errors.description && (
                    <p className="text-red-500 text-sm mt-1">{errors.description.message}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Location *
                  </label>
                  <Input
                    {...register('location')}
                    placeholder="Workshop location"
                    className={errors.location ? 'border-red-500' : ''}
                  />
                  {errors.location && (
                    <p className="text-red-500 text-sm mt-1">{errors.location.message}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Price (USD)
                  </label>
                  <Input
                    {...register('price')}
                    type="number"
                    placeholder="Leave empty for free"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Capacity
                  </label>
                  <Input
                    {...register('capacity')}
                    type="number"
                    placeholder="Maximum number of students"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Start Date
                  </label>
                  <Input
                    {...register('startDate')}
                    type="datetime-local"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    End Date
                  </label>
                  <Input
                    {...register('endDate')}
                    type="datetime-local"
                  />
                </div>
              </div>

              {/* New section for image, color, and auto-approve */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6 pt-6 border-t border-gray-200">
                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Workshop Image
                  </label>
                  <input
                    type="file"
                    accept="image/*"
                    onChange={handleImageChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                  />
                  {imagePreview && (
                    <div className="mt-2">
                      <img src={imagePreview} alt="Workshop preview" className="h-32 w-48 object-cover rounded-md" />
                    </div>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Form Color Theme
                  </label>
                  <div className="flex items-center space-x-2">
                    <input
                      {...register('formColor')}
                      type="color"
                      className="w-12 h-10 border border-gray-300 rounded cursor-pointer"
                    />
                    <Input
                      {...register('formColor')}
                      placeholder="#3B82F6"
                      className="flex-1"
                    />
                  </div>
                </div>

                <div className="flex items-center">
                  <input
                    {...register('autoApprove')}
                    type="checkbox"
                    className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                  />
                  <label className="ml-2 block text-sm text-gray-900">
                    Auto-approve applications
                  </label>
                </div>
              </div>
            </div>

            <div className="bg-white shadow rounded-lg p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-semibold text-gray-900">
                  Application Form
                </h2>
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setShowPreview(!showPreview)}
                >
                  {showPreview ? 'Hide Preview' : 'Show Preview'}
                </Button>
              </div>

              {showPreview ? (
                <FormPreview fields={formFields} />
              ) : (
                <FormBuilder fields={formFields} onChange={setFormFields} />
              )}
            </div>

            <div className="flex justify-end space-x-4">
              <Button
                type="button"
                variant="outline"
                onClick={() => router.push(`/master/workshops/${workshop.$id}`)}
              >
                Cancel
              </Button>
              <Button type="submit" disabled={isSaving || uploadingImage}>
                {isSaving ? 'Updating...' : 'Update Workshop'}
              </Button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}

# =============================================================================
# File: ./workshop-management/src/app/master/workshops/create/page.tsx
# =============================================================================

"use client";

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useAuthStore } from '@/store/auth';
import { WorkshopService } from '@/services/workshops';
import { FormField } from '@/types';
import { Navbar } from '@/components/layout/navbar';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { FormBuilder } from '@/components/form-builder/form-builder';
import { FormPreview } from '@/components/form-builder/form-preview';
import { storage } from '@/lib/appwrite';
import { ID } from 'appwrite';

const workshopSchema = z.object({
  title: z.string().min(1, 'Title is required'),
  description: z.string().min(10, 'Description must be at least 10 characters'),
  category: z.string().min(1, 'Category is required'),
  location: z.string().min(1, 'Location is required'),
  price: z.string().optional(),
  capacity: z.string().optional(),
  startDate: z.string().optional(),
  endDate: z.string().optional(),
  formColor: z.string().optional(),
  autoApprove: z.boolean().optional(),
});

type WorkshopForm = z.infer<typeof workshopSchema>;

const workshopService = new WorkshopService();

export default function CreateWorkshop() {
  const { user } = useAuthStore();
  const router = useRouter();
  const [formFields, setFormFields] = useState<FormField[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [showPreview, setShowPreview] = useState(false);
  const [workshopImage, setWorkshopImage] = useState<File | null>(null);
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const [uploadingImage, setUploadingImage] = useState(false);

  const {
    register,
    handleSubmit,
    watch,
    formState: { errors },
  } = useForm<WorkshopForm>({
    resolver: zodResolver(workshopSchema),
    defaultValues: {
      formColor: '#3B82F6',
      autoApprove: false,
    },
  });


  if (!user || user.role !== 'master') {
    return <div>Access denied</div>;
  }

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setWorkshopImage(file);
      const reader = new FileReader();
      reader.onload = (e) => {
        setImagePreview(e.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const uploadImage = async (): Promise<string | undefined> => {
    if (!workshopImage) return undefined;

    console.log('Starting image upload...', workshopImage.name, workshopImage.type);
    setUploadingImage(true);
    try {
      const response = await storage.createFile(
        'workshop-images', // We'll need to create this bucket
        ID.unique(),
        workshopImage,
        ['read("any")'] // Allow anyone to read the image
      );

      const imageUrl = `${process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT}/storage/buckets/workshop-images/files/${response.$id}/view?project=${process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID}`;
      console.log('Image uploaded successfully:', imageUrl);

      // Return the file URL
      return imageUrl;
    } catch (error) {
      console.error('Failed to upload image:', error);
      return undefined;
    } finally {
      setUploadingImage(false);
    }
  };

  const onSubmit = async (data: WorkshopForm) => {
    setIsLoading(true);

    try {
      // Upload image if provided
      const imageUrl = await uploadImage();

      const workshopData = {
        masterId: user.$id,
        title: data.title,
        description: data.description,
        category: data.category,
        location: data.location,
        price: data.price ? parseInt(data.price) : undefined,
        capacity: data.capacity ? parseInt(data.capacity) : undefined,
        startDate: data.startDate || undefined,
        endDate: data.endDate || undefined,
        applicationForm: formFields,
        imageUrl,
        formColor: data.formColor || '#3B82F6',
        autoApprove: data.autoApprove || false,
        status: 'draft' as const,
      };

      await workshopService.createWorkshop(workshopData);
      router.push('/master/dashboard');
    } catch (error) {
      console.error('Failed to create workshop:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <Navbar />

      <div className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <div className="px-4 py-6 sm:px-0">
          <div className="mb-6">
            <h1 className="text-3xl font-bold text-gray-900">
              Create New Workshop
            </h1>
            <p className="mt-2 text-gray-600">
              Fill in the details and create an application form for your workshop
            </p>
          </div>

          <form onSubmit={handleSubmit(onSubmit)} className="space-y-8">
            <div className="bg-white shadow rounded-lg p-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-6">
                Workshop Details
              </h2>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Workshop Title *
                  </label>
                  <Input
                    {...register('title')}
                    placeholder="Enter workshop title"
                    className={errors.title ? 'border-red-500' : ''}
                  />
                  {errors.title && (
                    <p className="text-red-500 text-sm mt-1">{errors.title.message}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Category *
                  </label>
                  <Input
                    {...register('category')}
                    placeholder="e.g., Technology, Art, Business"
                    className={errors.category ? 'border-red-500' : ''}
                  />
                  {errors.category && (
                    <p className="text-red-500 text-sm mt-1">{errors.category.message}</p>
                  )}
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Description *
                  </label>
                  <textarea
                    {...register('description')}
                    rows={4}
                    placeholder="Describe your workshop..."
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 ${
                      errors.description ? 'border-red-500' : 'border-gray-300'
                    }`}
                  />
                  {errors.description && (
                    <p className="text-red-500 text-sm mt-1">{errors.description.message}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Location *
                  </label>
                  <Input
                    {...register('location')}
                    placeholder="Workshop location"
                    className={errors.location ? 'border-red-500' : ''}
                  />
                  {errors.location && (
                    <p className="text-red-500 text-sm mt-1">{errors.location.message}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Price (USD)
                  </label>
                  <Input
                    {...register('price')}
                    type="number"
                    placeholder="Leave empty for free"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Capacity
                  </label>
                  <Input
                    {...register('capacity')}
                    type="number"
                    placeholder="Maximum number of students"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Start Date
                  </label>
                  <Input
                    {...register('startDate')}
                    type="datetime-local"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    End Date
                  </label>
                  <Input
                    {...register('endDate')}
                    type="datetime-local"
                  />
                </div>
              </div>

              {/* New section for image, color, and auto-approve */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6 pt-6 border-t border-gray-200">
                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Workshop Image
                  </label>
                  <input
                    type="file"
                    accept="image/*"
                    onChange={handleImageChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                  />
                  {imagePreview && (
                    <div className="mt-2">
                      <img src={imagePreview} alt="Workshop preview" className="h-32 w-48 object-cover rounded-md" />
                    </div>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Form Color Theme
                  </label>
                  <div className="flex items-center space-x-2">
                    <input
                      {...register('formColor')}
                      type="color"
                      className="w-12 h-10 border border-gray-300 rounded cursor-pointer"
                    />
                    <Input
                      {...register('formColor')}
                      placeholder="#3B82F6"
                      className="flex-1"
                    />
                  </div>
                </div>

                <div className="flex items-center">
                  <input
                    {...register('autoApprove')}
                    type="checkbox"
                    className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                  />
                  <label className="ml-2 block text-sm text-gray-900">
                    Auto-approve applications
                  </label>
                </div>
              </div>
            </div>

            <div className="bg-white shadow rounded-lg p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-semibold text-gray-900">
                  Application Form
                </h2>
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setShowPreview(!showPreview)}
                >
                  {showPreview ? 'Hide Preview' : 'Show Preview'}
                </Button>
              </div>

              {showPreview ? (
                <FormPreview fields={formFields} />
              ) : (
                <FormBuilder fields={formFields} onChange={setFormFields} />
              )}
            </div>

            <div className="flex justify-end space-x-4">
              <Button
                type="button"
                variant="outline"
                onClick={() => router.push('/master/dashboard')}
              >
                Cancel
              </Button>
              <Button type="submit" disabled={isLoading || uploadingImage}>
                {uploadingImage ? 'Uploading Image...' : isLoading ? 'Creating...' : 'Create Workshop'}
              </Button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}

# =============================================================================
# File: ./workshop-management/src/store/auth.ts
# =============================================================================

import { create } from 'zustand';
import { User } from '@/types';

interface AuthState {
  user: User | null;
  isLoading: boolean;
  setUser: (user: User | null) => void;
  setLoading: (loading: boolean) => void;
}

export const useAuthStore = create<AuthState>((set) => ({
  user: null,
  isLoading: true,
  setUser: (user) => set({ user }),
  setLoading: (isLoading) => set({ isLoading }),
}));

# =============================================================================
# File: ./workshop-management/deploy-schema.sh
# =============================================================================

#!/bin/bash

echo "Adding attributes to Workshops collection..."

# Workshops collection attributes
appwrite databases create-string-attribute --database-id workshop-platform --collection-id workshops --key title --size 255 --required true
sleep 2
appwrite databases create-string-attribute --database-id workshop-platform --collection-id workshops --key description --size 5000 --required true
sleep 2
appwrite databases create-string-attribute --database-id workshop-platform --collection-id workshops --key category --size 100 --required true
sleep 2
appwrite databases create-string-attribute --database-id workshop-platform --collection-id workshops --key location --size 255 --required true
sleep 2
appwrite databases create-integer-attribute --database-id workshop-platform --collection-id workshops --key price --required false
sleep 2
appwrite databases create-integer-attribute --database-id workshop-platform --collection-id workshops --key capacity --required false
sleep 2
appwrite databases create-enum-attribute --database-id workshop-platform --collection-id workshops --key scheduleType --elements "fixed,flexible" --required true
sleep 2
appwrite databases create-datetime-attribute --database-id workshop-platform --collection-id workshops --key startDate --required false
sleep 2
appwrite databases create-datetime-attribute --database-id workshop-platform --collection-id workshops --key endDate --required false
sleep 2
appwrite databases create-string-attribute --database-id workshop-platform --collection-id workshops --key applicationForm --size 10000 --required true
sleep 2
appwrite databases create-enum-attribute --database-id workshop-platform --collection-id workshops --key status --elements "draft,published,cancelled" --required true
sleep 2

echo "Adding attributes to Applications collection..."

# Applications collection attributes
appwrite databases create-string-attribute --database-id workshop-platform --collection-id applications --key workshopId --size 36 --required true
sleep 2
appwrite databases create-string-attribute --database-id workshop-platform --collection-id applications --key studentId --size 36 --required true
sleep 2
appwrite databases create-string-attribute --database-id workshop-platform --collection-id applications --key responses --size 10000 --required true
sleep 2
appwrite databases create-enum-attribute --database-id workshop-platform --collection-id applications --key status --elements "pending,approved,rejected" --required true
sleep 2

echo "Adding attributes to Payments collection..."

# Payments collection attributes
appwrite databases create-string-attribute --database-id workshop-platform --collection-id payments --key applicationId --size 36 --required true
sleep 2
appwrite databases create-integer-attribute --database-id workshop-platform --collection-id payments --key amount --required true
sleep 2
appwrite databases create-enum-attribute --database-id workshop-platform --collection-id payments --key status --elements "pending,completed,failed" --required true
sleep 2
appwrite databases create-string-attribute --database-id workshop-platform --collection-id payments --key stripePaymentId --size 255 --required false

echo "Schema deployment completed!"

